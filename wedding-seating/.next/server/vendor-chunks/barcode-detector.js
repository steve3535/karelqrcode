"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/barcode-detector";
exports.ids = ["vendor-chunks/barcode-detector"];
exports.modules = {

/***/ "(ssr)/./node_modules/barcode-detector/dist/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/barcode-detector/dist/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BarcodeDetector: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.BarcodeDetector),\n/* harmony export */   ZXING_CPP_COMMIT: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.ZXING_CPP_COMMIT),\n/* harmony export */   ZXING_WASM_SHA256: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.ZXING_WASM_SHA256),\n/* harmony export */   ZXING_WASM_VERSION: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.ZXING_WASM_VERSION),\n/* harmony export */   prepareZXingModule: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.prepareZXingModule),\n/* harmony export */   purgeZXingModule: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.purgeZXingModule),\n/* harmony export */   setZXingModuleOverrides: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__.setZXingModuleOverrides)\n/* harmony export */ });\n/* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfill.js */ \"(ssr)/./node_modules/barcode-detector/dist/es/polyfill.js\");\n/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ponyfill.js */ \"(ssr)/./node_modules/barcode-detector/dist/es/ponyfill.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmFyY29kZS1kZXRlY3Rvci9kaXN0L2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF1QjtBQUNvTDtBQVN6TSIsInNvdXJjZXMiOlsiL2hvbWUva21pc3NvaC9rYXJlbHFyY29kZS93ZWRkaW5nLXNlYXRpbmcvbm9kZV9tb2R1bGVzL2JhcmNvZGUtZGV0ZWN0b3IvZGlzdC9lcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3BvbHlmaWxsLmpzXCI7XG5pbXBvcnQgeyBCYXJjb2RlRGV0ZWN0b3IgYXMgTSwgWlhJTkdfQ1BQX0NPTU1JVCBhcyBYLCBaWElOR19XQVNNX1NIQTI1NiBhcyBaLCBaWElOR19XQVNNX1ZFUlNJT04gYXMgXywgcHJlcGFyZVpYaW5nTW9kdWxlIGFzIGQsIHB1cmdlWlhpbmdNb2R1bGUgYXMgaSwgc2V0WlhpbmdNb2R1bGVPdmVycmlkZXMgYXMgcCB9IGZyb20gXCIuL3BvbnlmaWxsLmpzXCI7XG5leHBvcnQge1xuICBNIGFzIEJhcmNvZGVEZXRlY3RvcixcbiAgWCBhcyBaWElOR19DUFBfQ09NTUlULFxuICBaIGFzIFpYSU5HX1dBU01fU0hBMjU2LFxuICBfIGFzIFpYSU5HX1dBU01fVkVSU0lPTixcbiAgZCBhcyBwcmVwYXJlWlhpbmdNb2R1bGUsXG4gIGkgYXMgcHVyZ2VaWGluZ01vZHVsZSxcbiAgcCBhcyBzZXRaWGluZ01vZHVsZU92ZXJyaWRlc1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/barcode-detector/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/barcode-detector/dist/es/polyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/barcode-detector/dist/es/polyfill.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZXING_CPP_COMMIT: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.ZXING_CPP_COMMIT),\n/* harmony export */   ZXING_WASM_SHA256: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.ZXING_WASM_SHA256),\n/* harmony export */   ZXING_WASM_VERSION: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.ZXING_WASM_VERSION),\n/* harmony export */   prepareZXingModule: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.prepareZXingModule),\n/* harmony export */   purgeZXingModule: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.purgeZXingModule),\n/* harmony export */   setZXingModuleOverrides: () => (/* reexport safe */ _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.setZXingModuleOverrides)\n/* harmony export */ });\n/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ \"(ssr)/./node_modules/barcode-detector/dist/es/ponyfill.js\");\n\n\nvar e;\n(e = globalThis.BarcodeDetector) != null || (globalThis.BarcodeDetector = _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.BarcodeDetector);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmFyY29kZS1kZXRlY3Rvci9kaXN0L2VzL3BvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBcUQ7QUFDZ0k7QUFDckw7QUFDQSwwRUFBMEUseURBQUM7QUFRekUiLCJzb3VyY2VzIjpbIi9ob21lL2ttaXNzb2gva2FyZWxxcmNvZGUvd2VkZGluZy1zZWF0aW5nL25vZGVfbW9kdWxlcy9iYXJjb2RlLWRldGVjdG9yL2Rpc3QvZXMvcG9seWZpbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFyY29kZURldGVjdG9yIGFzIHIgfSBmcm9tIFwiLi9wb255ZmlsbC5qc1wiO1xuaW1wb3J0IHsgWlhJTkdfQ1BQX0NPTU1JVCBhcyBkLCBaWElOR19XQVNNX1NIQTI1NiBhcyBpLCBaWElOR19XQVNNX1ZFUlNJT04gYXMgWCwgcHJlcGFyZVpYaW5nTW9kdWxlIGFzIFosIHB1cmdlWlhpbmdNb2R1bGUgYXMgXywgc2V0WlhpbmdNb2R1bGVPdmVycmlkZXMgYXMgZyB9IGZyb20gXCIuL3BvbnlmaWxsLmpzXCI7XG52YXIgZTtcbihlID0gZ2xvYmFsVGhpcy5CYXJjb2RlRGV0ZWN0b3IpICE9IG51bGwgfHwgKGdsb2JhbFRoaXMuQmFyY29kZURldGVjdG9yID0gcik7XG5leHBvcnQge1xuICBkIGFzIFpYSU5HX0NQUF9DT01NSVQsXG4gIGkgYXMgWlhJTkdfV0FTTV9TSEEyNTYsXG4gIFggYXMgWlhJTkdfV0FTTV9WRVJTSU9OLFxuICBaIGFzIHByZXBhcmVaWGluZ01vZHVsZSxcbiAgXyBhcyBwdXJnZVpYaW5nTW9kdWxlLFxuICBnIGFzIHNldFpYaW5nTW9kdWxlT3ZlcnJpZGVzXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/barcode-detector/dist/es/polyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/barcode-detector/dist/es/ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/barcode-detector/dist/es/ponyfill.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BarcodeDetector: () => (/* binding */ Eo),\n/* harmony export */   ZXING_CPP_COMMIT: () => (/* binding */ bo),\n/* harmony export */   ZXING_WASM_SHA256: () => (/* binding */ Po),\n/* harmony export */   ZXING_WASM_VERSION: () => (/* binding */ $o),\n/* harmony export */   prepareZXingModule: () => (/* binding */ Be),\n/* harmony export */   purgeZXingModule: () => (/* binding */ Co),\n/* harmony export */   setZXingModuleOverrides: () => (/* binding */ To)\n/* harmony export */ });\nvar Ae = (o) => {\n  throw TypeError(o);\n};\nvar Se = (o, f, c) => f.has(o) || Ae(\"Cannot \" + c);\nvar Ie = (o, f, c) => (Se(o, f, \"read from private field\"), c ? c.call(o) : f.get(o)), De = (o, f, c) => f.has(o) ? Ae(\"Cannot add the same private member more than once\") : f instanceof WeakSet ? f.add(o) : f.set(o, c), Me = (o, f, c, T) => (Se(o, f, \"write to private field\"), T ? T.call(o, c) : f.set(o, c), c);\nconst Dt = [\n  [\"Aztec\", \"M\"],\n  [\"Codabar\", \"L\"],\n  [\"Code39\", \"L\"],\n  [\"Code93\", \"L\"],\n  [\"Code128\", \"L\"],\n  [\"DataBar\", \"L\"],\n  [\"DataBarExpanded\", \"L\"],\n  [\"DataMatrix\", \"M\"],\n  [\"EAN-8\", \"L\"],\n  [\"EAN-13\", \"L\"],\n  [\"ITF\", \"L\"],\n  [\"MaxiCode\", \"M\"],\n  [\"PDF417\", \"M\"],\n  [\"QRCode\", \"M\"],\n  [\"UPC-A\", \"L\"],\n  [\"UPC-E\", \"L\"],\n  [\"MicroQRCode\", \"M\"],\n  [\"rMQRCode\", \"M\"],\n  [\"DXFilmEdge\", \"L\"],\n  [\"DataBarLimited\", \"L\"]\n], Mt = Dt.map(([o]) => o), La = Mt.filter(\n  (o, f) => Dt[f][1] === \"L\"\n), Ba = Mt.filter(\n  (o, f) => Dt[f][1] === \"M\"\n);\nfunction Yt(o) {\n  switch (o) {\n    case \"Linear-Codes\":\n      return La.reduce((f, c) => f | Yt(c), 0);\n    case \"Matrix-Codes\":\n      return Ba.reduce((f, c) => f | Yt(c), 0);\n    case \"Any\":\n      return (1 << Dt.length) - 1;\n    case \"None\":\n      return 0;\n    default:\n      return 1 << Mt.indexOf(o);\n  }\n}\nfunction Wa(o) {\n  if (o === 0)\n    return \"None\";\n  const f = 31 - Math.clz32(o);\n  return Mt[f];\n}\nfunction Ua(o) {\n  return o.reduce((f, c) => f | Yt(c), 0);\n}\nconst Va = [\n  \"LocalAverage\",\n  \"GlobalHistogram\",\n  \"FixedThreshold\",\n  \"BoolCast\"\n];\nfunction ka(o) {\n  return Va.indexOf(o);\n}\nconst Fe = [\n  \"Unknown\",\n  \"ASCII\",\n  \"ISO8859_1\",\n  \"ISO8859_2\",\n  \"ISO8859_3\",\n  \"ISO8859_4\",\n  \"ISO8859_5\",\n  \"ISO8859_6\",\n  \"ISO8859_7\",\n  \"ISO8859_8\",\n  \"ISO8859_9\",\n  \"ISO8859_10\",\n  \"ISO8859_11\",\n  \"ISO8859_13\",\n  \"ISO8859_14\",\n  \"ISO8859_15\",\n  \"ISO8859_16\",\n  \"Cp437\",\n  \"Cp1250\",\n  \"Cp1251\",\n  \"Cp1252\",\n  \"Cp1256\",\n  \"Shift_JIS\",\n  \"Big5\",\n  \"GB2312\",\n  \"GB18030\",\n  \"EUC_JP\",\n  \"EUC_KR\",\n  \"UTF16BE\",\n  /**\n   * UnicodeBig [[deprecated]]\n   */\n  \"UTF16BE\",\n  \"UTF8\",\n  \"UTF16LE\",\n  \"UTF32BE\",\n  \"UTF32LE\",\n  \"BINARY\"\n];\nfunction Ha(o) {\n  return o === \"UnicodeBig\" ? Fe.indexOf(\"UTF16BE\") : Fe.indexOf(o);\n}\nconst Na = [\n  \"Text\",\n  \"Binary\",\n  \"Mixed\",\n  \"GS1\",\n  \"ISO15434\",\n  \"UnknownECI\"\n];\nfunction za(o) {\n  return Na[o];\n}\nconst Ga = [\"Ignore\", \"Read\", \"Require\"];\nfunction Xa(o) {\n  return Ga.indexOf(o);\n}\nconst qa = [\"Plain\", \"ECI\", \"HRI\", \"Hex\", \"Escaped\"];\nfunction Ya(o) {\n  return qa.indexOf(o);\n}\nconst It = {\n  formats: [],\n  tryHarder: !0,\n  tryRotate: !0,\n  tryInvert: !0,\n  tryDownscale: !0,\n  tryDenoise: !1,\n  binarizer: \"LocalAverage\",\n  isPure: !1,\n  downscaleFactor: 3,\n  downscaleThreshold: 500,\n  minLineCount: 2,\n  maxNumberOfSymbols: 255,\n  tryCode39ExtendedMode: !0,\n  returnErrors: !1,\n  eanAddOnSymbol: \"Ignore\",\n  textMode: \"HRI\",\n  characterSet: \"Unknown\"\n};\nfunction je(o) {\n  return {\n    ...o,\n    formats: Ua(o.formats),\n    binarizer: ka(o.binarizer),\n    eanAddOnSymbol: Xa(o.eanAddOnSymbol),\n    textMode: Ya(o.textMode),\n    characterSet: Ha(o.characterSet)\n  };\n}\nfunction Za(o) {\n  return {\n    ...o,\n    format: Wa(o.format),\n    contentType: za(o.contentType),\n    eccLevel: o.ecLevel\n  };\n}\nconst $o = \"2.1.2\", bo = \"a1516b34167cff504bf3c83698ea841e13a8f7f1\", Qa = {\n  locateFile: (o, f) => {\n    const c = o.match(/_(.+?)\\.wasm$/);\n    return c ? `https://fastly.jsdelivr.net/npm/zxing-wasm@2.1.2/dist/${c[1]}/${o}` : f + o;\n  }\n}, St = /* @__PURE__ */ new WeakMap();\nfunction Ja(o, f) {\n  return Object.is(o, f) || Object.keys(o).length === Object.keys(f).length && Object.keys(o).every(\n    (c) => Object.prototype.hasOwnProperty.call(f, c) && o[c] === f[c]\n  );\n}\nfunction Le(o, {\n  overrides: f,\n  equalityFn: c = Ja,\n  fireImmediately: T = !1\n} = {}) {\n  var $;\n  const [x, D] = ($ = St.get(o)) != null ? $ : [Qa], R = f != null ? f : x;\n  let O;\n  if (T) {\n    if (D && (O = c(x, R)))\n      return D;\n    const M = o({\n      ...R\n    });\n    return St.set(o, [R, M]), M;\n  }\n  (O != null ? O : c(x, R)) || St.set(o, [R]);\n}\nfunction Ka(o) {\n  St.delete(o);\n}\nasync function to(o, f, c = It) {\n  const T = {\n    ...It,\n    ...c\n  }, $ = await Le(o, {\n    fireImmediately: !0\n  });\n  let x, D;\n  if (\"width\" in f && \"height\" in f && \"data\" in f) {\n    const {\n      data: O,\n      data: { byteLength: M },\n      width: F,\n      height: q\n    } = f;\n    D = $._malloc(M), $.HEAPU8.set(O, D), x = $.readBarcodesFromPixmap(\n      D,\n      F,\n      q,\n      je(T)\n    );\n  } else {\n    let O, M;\n    if (\"buffer\" in f)\n      [O, M] = [f.byteLength, f];\n    else if (\"byteLength\" in f)\n      [O, M] = [f.byteLength, new Uint8Array(f)];\n    else if (\"size\" in f)\n      [O, M] = [f.size, new Uint8Array(await f.arrayBuffer())];\n    else\n      throw new TypeError(\"Invalid input type\");\n    D = $._malloc(O), $.HEAPU8.set(M, D), x = $.readBarcodesFromImage(\n      D,\n      O,\n      je(T)\n    );\n  }\n  $._free(D);\n  const R = [];\n  for (let O = 0; O < x.size(); ++O)\n    R.push(\n      Za(x.get(O))\n    );\n  return R;\n}\n({\n  ...It,\n  formats: [...It.formats]\n});\nvar Qt = async function(o = {}) {\n  var f, c = o, T, $, x = new Promise((e, t) => {\n    T = e, $ = t;\n  }), D = typeof window == \"object\", R = typeof Bun < \"u\", O = typeof WorkerGlobalScope < \"u\";\n  typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\" && process.type != \"renderer\";\n  var M = \"./this.program\", F = \"\";\n  function q(e) {\n    return c.locateFile ? c.locateFile(e, F) : F + e;\n  }\n  var rt, Y;\n  (D || O || R) && (O ? F = self.location.href : typeof document < \"u\" && document.currentScript && (F = document.currentScript.src), F.startsWith(\"blob:\") ? F = \"\" : F = F.slice(0, F.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1), O && (Y = (e) => {\n    var t = new XMLHttpRequest();\n    return t.open(\"GET\", e, !1), t.responseType = \"arraybuffer\", t.send(null), new Uint8Array(t.response);\n  }), rt = async (e) => {\n    var t = await fetch(e, {\n      credentials: \"same-origin\"\n    });\n    if (t.ok)\n      return t.arrayBuffer();\n    throw new Error(t.status + \" : \" + t.url);\n  });\n  var st = console.log.bind(console), k = console.error.bind(console), Z, nt, Jt = !1, Q, B, ut, vt, at, P, Kt, te;\n  function ee() {\n    var e = nt.buffer;\n    Q = new Int8Array(e), ut = new Int16Array(e), c.HEAPU8 = B = new Uint8Array(e), vt = new Uint16Array(e), at = new Int32Array(e), P = new Uint32Array(e), Kt = new Float32Array(e), te = new Float64Array(e);\n  }\n  function qe() {\n    if (c.preRun)\n      for (typeof c.preRun == \"function\" && (c.preRun = [c.preRun]); c.preRun.length; )\n        sr(c.preRun.shift());\n    re(ae);\n  }\n  function Ye() {\n    E.ya();\n  }\n  function Ze() {\n    if (c.postRun)\n      for (typeof c.postRun == \"function\" && (c.postRun = [c.postRun]); c.postRun.length; )\n        ir(c.postRun.shift());\n    re(ne);\n  }\n  var J = 0, ct = null;\n  function Qe(e) {\n    var t;\n    J++, (t = c.monitorRunDependencies) === null || t === void 0 || t.call(c, J);\n  }\n  function Je(e) {\n    var t;\n    if (J--, (t = c.monitorRunDependencies) === null || t === void 0 || t.call(c, J), J == 0 && ct) {\n      var r = ct;\n      ct = null, r();\n    }\n  }\n  function Ft(e) {\n    var t;\n    (t = c.onAbort) === null || t === void 0 || t.call(c, e), e = \"Aborted(\" + e + \")\", k(e), Jt = !0, e += \". Build with -sASSERTIONS for more info.\";\n    var r = new WebAssembly.RuntimeError(e);\n    throw $(r), r;\n  }\n  var yt;\n  function Ke() {\n    return q(\"zxing_reader.wasm\");\n  }\n  function tr(e) {\n    if (e == yt && Z)\n      return new Uint8Array(Z);\n    if (Y)\n      return Y(e);\n    throw \"both async and sync fetching of the wasm failed\";\n  }\n  async function er(e) {\n    if (!Z)\n      try {\n        var t = await rt(e);\n        return new Uint8Array(t);\n      } catch {\n      }\n    return tr(e);\n  }\n  async function rr(e, t) {\n    try {\n      var r = await er(e), n = await WebAssembly.instantiate(r, t);\n      return n;\n    } catch (a) {\n      k(`failed to asynchronously prepare wasm: ${a}`), Ft(a);\n    }\n  }\n  async function nr(e, t, r) {\n    if (!e && typeof WebAssembly.instantiateStreaming == \"function\")\n      try {\n        var n = fetch(t, {\n          credentials: \"same-origin\"\n        }), a = await WebAssembly.instantiateStreaming(n, r);\n        return a;\n      } catch (i) {\n        k(`wasm streaming compile failed: ${i}`), k(\"falling back to ArrayBuffer instantiation\");\n      }\n    return rr(t, r);\n  }\n  function ar() {\n    return {\n      a: Hn\n    };\n  }\n  async function or() {\n    function e(i, u) {\n      return E = i.exports, nt = E.xa, ee(), pe = E.Ba, Je(), E;\n    }\n    Qe();\n    function t(i) {\n      return e(i.instance);\n    }\n    var r = ar();\n    if (c.instantiateWasm)\n      return new Promise((i, u) => {\n        c.instantiateWasm(r, (s, l) => {\n          i(e(s));\n        });\n      });\n    yt != null || (yt = Ke());\n    try {\n      var n = await nr(Z, yt, r), a = t(n);\n      return a;\n    } catch (i) {\n      return $(i), Promise.reject(i);\n    }\n  }\n  var re = (e) => {\n    for (; e.length > 0; )\n      e.shift()(c);\n  }, ne = [], ir = (e) => ne.push(e), ae = [], sr = (e) => ae.push(e), y = (e) => Xn(e), m = () => qn(), mt = [], gt = 0, ur = (e) => {\n    var t = new jt(e);\n    return t.get_caught() || (t.set_caught(!0), gt--), t.set_rethrown(!1), mt.push(t), Zn(e), zn(e);\n  }, H = 0, cr = () => {\n    v(0, 0);\n    var e = mt.pop();\n    Yn(e.excPtr), H = 0;\n  };\n  class jt {\n    constructor(t) {\n      this.excPtr = t, this.ptr = t - 24;\n    }\n    set_type(t) {\n      P[this.ptr + 4 >> 2] = t;\n    }\n    get_type() {\n      return P[this.ptr + 4 >> 2];\n    }\n    set_destructor(t) {\n      P[this.ptr + 8 >> 2] = t;\n    }\n    get_destructor() {\n      return P[this.ptr + 8 >> 2];\n    }\n    set_caught(t) {\n      t = t ? 1 : 0, Q[this.ptr + 12] = t;\n    }\n    get_caught() {\n      return Q[this.ptr + 12] != 0;\n    }\n    set_rethrown(t) {\n      t = t ? 1 : 0, Q[this.ptr + 13] = t;\n    }\n    get_rethrown() {\n      return Q[this.ptr + 13] != 0;\n    }\n    init(t, r) {\n      this.set_adjusted_ptr(0), this.set_type(t), this.set_destructor(r);\n    }\n    set_adjusted_ptr(t) {\n      P[this.ptr + 16 >> 2] = t;\n    }\n    get_adjusted_ptr() {\n      return P[this.ptr + 16 >> 2];\n    }\n  }\n  var wt = (e) => Gn(e), Rt = (e) => {\n    var t = H;\n    if (!t)\n      return wt(0), 0;\n    var r = new jt(t);\n    r.set_adjusted_ptr(t);\n    var n = r.get_type();\n    if (!n)\n      return wt(0), t;\n    for (var a of e) {\n      if (a === 0 || a === n)\n        break;\n      var i = r.ptr + 16;\n      if (Qn(a, n, i))\n        return wt(a), t;\n    }\n    return wt(n), t;\n  }, lr = () => Rt([]), fr = (e) => Rt([e]), dr = (e, t) => Rt([e, t]), hr = () => {\n    var e = mt.pop();\n    e || Ft(\"no exception to throw\");\n    var t = e.excPtr;\n    throw e.get_rethrown() || (mt.push(e), e.set_rethrown(!0), e.set_caught(!1), gt++), H = t, H;\n  }, pr = (e, t, r) => {\n    var n = new jt(e);\n    throw n.init(t, r), H = e, gt++, H;\n  }, vr = () => gt, yr = (e) => {\n    throw H || (H = e), H;\n  }, mr = () => Ft(\"\"), $t = {}, Lt = (e) => {\n    for (; e.length; ) {\n      var t = e.pop(), r = e.pop();\n      r(t);\n    }\n  };\n  function lt(e) {\n    return this.fromWireType(P[e >> 2]);\n  }\n  var ot = {}, K = {}, bt = {}, gr = c.InternalError = class extends Error {\n    constructor(e) {\n      super(e), this.name = \"InternalError\";\n    }\n  }, Ct = (e) => {\n    throw new gr(e);\n  }, tt = (e, t, r) => {\n    e.forEach((s) => bt[s] = t);\n    function n(s) {\n      var l = r(s);\n      l.length !== e.length && Ct(\"Mismatched type converter count\");\n      for (var d = 0; d < e.length; ++d)\n        V(e[d], l[d]);\n    }\n    var a = new Array(t.length), i = [], u = 0;\n    t.forEach((s, l) => {\n      K.hasOwnProperty(s) ? a[l] = K[s] : (i.push(s), ot.hasOwnProperty(s) || (ot[s] = []), ot[s].push(() => {\n        a[l] = K[s], ++u, u === i.length && n(a);\n      }));\n    }), i.length === 0 && n(a);\n  }, wr = (e) => {\n    var t = $t[e];\n    delete $t[e];\n    var r = t.rawConstructor, n = t.rawDestructor, a = t.fields, i = a.map((u) => u.getterReturnType).concat(a.map((u) => u.setterArgumentType));\n    tt([e], i, (u) => {\n      var s = {};\n      return a.forEach((l, d) => {\n        var h = l.fieldName, p = u[d], w = u[d].optional, b = l.getter, _ = l.getterContext, S = u[d + a.length], A = l.setter, I = l.setterContext;\n        s[h] = {\n          read: (X) => p.fromWireType(b(_, X)),\n          write: (X, L) => {\n            var W = [];\n            A(I, X, S.toWireType(W, L)), Lt(W);\n          },\n          optional: w\n        };\n      }), [{\n        name: t.name,\n        fromWireType: (l) => {\n          var d = {};\n          for (var h in s)\n            d[h] = s[h].read(l);\n          return n(l), d;\n        },\n        toWireType: (l, d) => {\n          for (var h in s)\n            if (!(h in d) && !s[h].optional)\n              throw new TypeError(`Missing field: \"${h}\"`);\n          var p = r();\n          for (h in s)\n            s[h].write(p, d[h]);\n          return l !== null && l.push(n, p), p;\n        },\n        argPackAdvance: N,\n        readValueFromPointer: lt,\n        destructorFunction: n\n      }];\n    });\n  }, $r = (e, t, r, n, a) => {\n  }, br = () => {\n    for (var e = new Array(256), t = 0; t < 256; ++t)\n      e[t] = String.fromCharCode(t);\n    oe = e;\n  }, oe, j = (e) => {\n    for (var t = \"\", r = e; B[r]; )\n      t += oe[B[r++]];\n    return t;\n  }, ft = c.BindingError = class extends Error {\n    constructor(e) {\n      super(e), this.name = \"BindingError\";\n    }\n  }, C = (e) => {\n    throw new ft(e);\n  };\n  function Cr(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    var n = t.name;\n    if (e || C(`type \"${n}\" must have a positive integer typeid pointer`), K.hasOwnProperty(e)) {\n      if (r.ignoreDuplicateRegistrations)\n        return;\n      C(`Cannot register type '${n}' twice`);\n    }\n    if (K[e] = t, delete bt[e], ot.hasOwnProperty(e)) {\n      var a = ot[e];\n      delete ot[e], a.forEach((i) => i());\n    }\n  }\n  function V(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return Cr(e, t, r);\n  }\n  var N = 8, Tr = (e, t, r, n) => {\n    t = j(t), V(e, {\n      name: t,\n      fromWireType: function(a) {\n        return !!a;\n      },\n      toWireType: function(a, i) {\n        return i ? r : n;\n      },\n      argPackAdvance: N,\n      readValueFromPointer: function(a) {\n        return this.fromWireType(B[a]);\n      },\n      destructorFunction: null\n    });\n  }, Pr = (e) => ({\n    count: e.count,\n    deleteScheduled: e.deleteScheduled,\n    preservePointerOnDelete: e.preservePointerOnDelete,\n    ptr: e.ptr,\n    ptrType: e.ptrType,\n    smartPtr: e.smartPtr,\n    smartPtrType: e.smartPtrType\n  }), Bt = (e) => {\n    function t(r) {\n      return r.$$.ptrType.registeredClass.name;\n    }\n    C(t(e) + \" instance already deleted\");\n  }, Wt = !1, ie = (e) => {\n  }, Er = (e) => {\n    e.smartPtr ? e.smartPtrType.rawDestructor(e.smartPtr) : e.ptrType.registeredClass.rawDestructor(e.ptr);\n  }, se = (e) => {\n    e.count.value -= 1;\n    var t = e.count.value === 0;\n    t && Er(e);\n  }, dt = (e) => typeof FinalizationRegistry > \"u\" ? (dt = (t) => t, e) : (Wt = new FinalizationRegistry((t) => {\n    se(t.$$);\n  }), dt = (t) => {\n    var r = t.$$, n = !!r.smartPtr;\n    if (n) {\n      var a = {\n        $$: r\n      };\n      Wt.register(t, a, t);\n    }\n    return t;\n  }, ie = (t) => Wt.unregister(t), dt(e)), _r = () => {\n    let e = Tt.prototype;\n    Object.assign(e, {\n      isAliasOf(r) {\n        if (!(this instanceof Tt) || !(r instanceof Tt))\n          return !1;\n        var n = this.$$.ptrType.registeredClass, a = this.$$.ptr;\n        r.$$ = r.$$;\n        for (var i = r.$$.ptrType.registeredClass, u = r.$$.ptr; n.baseClass; )\n          a = n.upcast(a), n = n.baseClass;\n        for (; i.baseClass; )\n          u = i.upcast(u), i = i.baseClass;\n        return n === i && a === u;\n      },\n      clone() {\n        if (this.$$.ptr || Bt(this), this.$$.preservePointerOnDelete)\n          return this.$$.count.value += 1, this;\n        var r = dt(Object.create(Object.getPrototypeOf(this), {\n          $$: {\n            value: Pr(this.$$)\n          }\n        }));\n        return r.$$.count.value += 1, r.$$.deleteScheduled = !1, r;\n      },\n      delete() {\n        this.$$.ptr || Bt(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && C(\"Object already scheduled for deletion\"), ie(this), se(this.$$), this.$$.preservePointerOnDelete || (this.$$.smartPtr = void 0, this.$$.ptr = void 0);\n      },\n      isDeleted() {\n        return !this.$$.ptr;\n      },\n      deleteLater() {\n        return this.$$.ptr || Bt(this), this.$$.deleteScheduled && !this.$$.preservePointerOnDelete && C(\"Object already scheduled for deletion\"), this.$$.deleteScheduled = !0, this;\n      }\n    });\n    const t = Symbol.dispose;\n    t && (e[t] = e.delete);\n  };\n  function Tt() {\n  }\n  var Ut = (e, t) => Object.defineProperty(t, \"name\", {\n    value: e\n  }), ue = {}, ce = (e, t, r) => {\n    if (e[t].overloadTable === void 0) {\n      var n = e[t];\n      e[t] = function() {\n        for (var a = arguments.length, i = new Array(a), u = 0; u < a; u++)\n          i[u] = arguments[u];\n        return e[t].overloadTable.hasOwnProperty(i.length) || C(`Function '${r}' called with an invalid number of arguments (${i.length}) - expects one of (${e[t].overloadTable})!`), e[t].overloadTable[i.length].apply(this, i);\n      }, e[t].overloadTable = [], e[t].overloadTable[n.argCount] = n;\n    }\n  }, le = (e, t, r) => {\n    c.hasOwnProperty(e) ? ((r === void 0 || c[e].overloadTable !== void 0 && c[e].overloadTable[r] !== void 0) && C(`Cannot register public name '${e}' twice`), ce(c, e, e), c[e].overloadTable.hasOwnProperty(r) && C(`Cannot register multiple overloads of a function with the same number of arguments (${r})!`), c[e].overloadTable[r] = t) : (c[e] = t, c[e].argCount = r);\n  }, Or = 48, xr = 57, Ar = (e) => {\n    e = e.replace(/[^a-zA-Z0-9_]/g, \"$\");\n    var t = e.charCodeAt(0);\n    return t >= Or && t <= xr ? `_${e}` : e;\n  };\n  function Sr(e, t, r, n, a, i, u, s) {\n    this.name = e, this.constructor = t, this.instancePrototype = r, this.rawDestructor = n, this.baseClass = a, this.getActualType = i, this.upcast = u, this.downcast = s, this.pureVirtualFunctions = [];\n  }\n  var Vt = (e, t, r) => {\n    for (; t !== r; )\n      t.upcast || C(`Expected null or instance of ${r.name}, got an instance of ${t.name}`), e = t.upcast(e), t = t.baseClass;\n    return e;\n  };\n  function Ir(e, t) {\n    if (t === null)\n      return this.isReference && C(`null is not a valid ${this.name}`), 0;\n    t.$$ || C(`Cannot pass \"${embindRepr(t)}\" as a ${this.name}`), t.$$.ptr || C(`Cannot pass deleted object as a pointer of type ${this.name}`);\n    var r = t.$$.ptrType.registeredClass, n = Vt(t.$$.ptr, r, this.registeredClass);\n    return n;\n  }\n  function Dr(e, t) {\n    var r;\n    if (t === null)\n      return this.isReference && C(`null is not a valid ${this.name}`), this.isSmartPointer ? (r = this.rawConstructor(), e !== null && e.push(this.rawDestructor, r), r) : 0;\n    (!t || !t.$$) && C(`Cannot pass \"${embindRepr(t)}\" as a ${this.name}`), t.$$.ptr || C(`Cannot pass deleted object as a pointer of type ${this.name}`), !this.isConst && t.$$.ptrType.isConst && C(`Cannot convert argument of type ${t.$$.smartPtrType ? t.$$.smartPtrType.name : t.$$.ptrType.name} to parameter type ${this.name}`);\n    var n = t.$$.ptrType.registeredClass;\n    if (r = Vt(t.$$.ptr, n, this.registeredClass), this.isSmartPointer)\n      switch (t.$$.smartPtr === void 0 && C(\"Passing raw pointer to smart pointer is illegal\"), this.sharingPolicy) {\n        case 0:\n          t.$$.smartPtrType === this ? r = t.$$.smartPtr : C(`Cannot convert argument of type ${t.$$.smartPtrType ? t.$$.smartPtrType.name : t.$$.ptrType.name} to parameter type ${this.name}`);\n          break;\n        case 1:\n          r = t.$$.smartPtr;\n          break;\n        case 2:\n          if (t.$$.smartPtrType === this)\n            r = t.$$.smartPtr;\n          else {\n            var a = t.clone();\n            r = this.rawShare(r, G.toHandle(() => a.delete())), e !== null && e.push(this.rawDestructor, r);\n          }\n          break;\n        default:\n          C(\"Unsupporting sharing policy\");\n      }\n    return r;\n  }\n  function Mr(e, t) {\n    if (t === null)\n      return this.isReference && C(`null is not a valid ${this.name}`), 0;\n    t.$$ || C(`Cannot pass \"${embindRepr(t)}\" as a ${this.name}`), t.$$.ptr || C(`Cannot pass deleted object as a pointer of type ${this.name}`), t.$$.ptrType.isConst && C(`Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`);\n    var r = t.$$.ptrType.registeredClass, n = Vt(t.$$.ptr, r, this.registeredClass);\n    return n;\n  }\n  var fe = (e, t, r) => {\n    if (t === r)\n      return e;\n    if (r.baseClass === void 0)\n      return null;\n    var n = fe(e, t, r.baseClass);\n    return n === null ? null : r.downcast(n);\n  }, Fr = {}, jr = (e, t) => {\n    for (t === void 0 && C(\"ptr should not be undefined\"); e.baseClass; )\n      t = e.upcast(t), e = e.baseClass;\n    return t;\n  }, Rr = (e, t) => (t = jr(e, t), Fr[t]), Pt = (e, t) => {\n    (!t.ptrType || !t.ptr) && Ct(\"makeClassHandle requires ptr and ptrType\");\n    var r = !!t.smartPtrType, n = !!t.smartPtr;\n    return r !== n && Ct(\"Both smartPtrType and smartPtr must be specified\"), t.count = {\n      value: 1\n    }, dt(Object.create(e, {\n      $$: {\n        value: t,\n        writable: !0\n      }\n    }));\n  };\n  function Lr(e) {\n    var t = this.getPointee(e);\n    if (!t)\n      return this.destructor(e), null;\n    var r = Rr(this.registeredClass, t);\n    if (r !== void 0) {\n      if (r.$$.count.value === 0)\n        return r.$$.ptr = t, r.$$.smartPtr = e, r.clone();\n      var n = r.clone();\n      return this.destructor(e), n;\n    }\n    function a() {\n      return this.isSmartPointer ? Pt(this.registeredClass.instancePrototype, {\n        ptrType: this.pointeeType,\n        ptr: t,\n        smartPtrType: this,\n        smartPtr: e\n      }) : Pt(this.registeredClass.instancePrototype, {\n        ptrType: this,\n        ptr: e\n      });\n    }\n    var i = this.registeredClass.getActualType(t), u = ue[i];\n    if (!u)\n      return a.call(this);\n    var s;\n    this.isConst ? s = u.constPointerType : s = u.pointerType;\n    var l = fe(t, this.registeredClass, s.registeredClass);\n    return l === null ? a.call(this) : this.isSmartPointer ? Pt(s.registeredClass.instancePrototype, {\n      ptrType: s,\n      ptr: l,\n      smartPtrType: this,\n      smartPtr: e\n    }) : Pt(s.registeredClass.instancePrototype, {\n      ptrType: s,\n      ptr: l\n    });\n  }\n  var Br = () => {\n    Object.assign(Et.prototype, {\n      getPointee(e) {\n        return this.rawGetPointee && (e = this.rawGetPointee(e)), e;\n      },\n      destructor(e) {\n        var t;\n        (t = this.rawDestructor) === null || t === void 0 || t.call(this, e);\n      },\n      argPackAdvance: N,\n      readValueFromPointer: lt,\n      fromWireType: Lr\n    });\n  };\n  function Et(e, t, r, n, a, i, u, s, l, d, h) {\n    this.name = e, this.registeredClass = t, this.isReference = r, this.isConst = n, this.isSmartPointer = a, this.pointeeType = i, this.sharingPolicy = u, this.rawGetPointee = s, this.rawConstructor = l, this.rawShare = d, this.rawDestructor = h, !a && t.baseClass === void 0 ? n ? (this.toWireType = Ir, this.destructorFunction = null) : (this.toWireType = Mr, this.destructorFunction = null) : this.toWireType = Dr;\n  }\n  var de = (e, t, r) => {\n    c.hasOwnProperty(e) || Ct(\"Replacing nonexistent public symbol\"), c[e].overloadTable !== void 0 && r !== void 0 ? c[e].overloadTable[r] = t : (c[e] = t, c[e].argCount = r);\n  }, he = [], pe, g = (e) => {\n    var t = he[e];\n    return t || (he[e] = t = pe.get(e)), t;\n  }, Wr = function(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    if (e.includes(\"j\"))\n      return dynCallLegacy(e, t, r);\n    var n = g(t), a = n(...r);\n    return a;\n  }, Ur = function(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n    return function() {\n      for (var n = arguments.length, a = new Array(n), i = 0; i < n; i++)\n        a[i] = arguments[i];\n      return Wr(e, t, a, r);\n    };\n  }, U = function(e, t) {\n    e = j(e);\n    function r() {\n      if (e.includes(\"j\"))\n        return Ur(e, t);\n      var a = g(t);\n      return a;\n    }\n    var n = r();\n    return typeof n != \"function\" && C(`unknown function pointer with signature ${e}: ${t}`), n;\n  };\n  class Vr extends Error {\n  }\n  var ve = (e) => {\n    var t = Nn(e), r = j(t);\n    return et(t), r;\n  }, _t = (e, t) => {\n    var r = [], n = {};\n    function a(i) {\n      if (!n[i] && !K[i]) {\n        if (bt[i]) {\n          bt[i].forEach(a);\n          return;\n        }\n        r.push(i), n[i] = !0;\n      }\n    }\n    throw t.forEach(a), new Vr(`${e}: ` + r.map(ve).join([\", \"]));\n  }, kr = (e, t, r, n, a, i, u, s, l, d, h, p, w) => {\n    h = j(h), i = U(a, i), s && (s = U(u, s)), d && (d = U(l, d)), w = U(p, w);\n    var b = Ar(h);\n    le(b, function() {\n      _t(`Cannot construct ${h} due to unbound types`, [n]);\n    }), tt([e, t, r], n ? [n] : [], (_) => {\n      _ = _[0];\n      var S, A;\n      n ? (S = _.registeredClass, A = S.instancePrototype) : A = Tt.prototype;\n      var I = Ut(h, function() {\n        if (Object.getPrototypeOf(this) !== X)\n          throw new ft(`Use 'new' to construct ${h}`);\n        if (L.constructor_body === void 0)\n          throw new ft(`${h} has no accessible constructor`);\n        for (var Oe = arguments.length, xt = new Array(Oe), At = 0; At < Oe; At++)\n          xt[At] = arguments[At];\n        var xe = L.constructor_body[xt.length];\n        if (xe === void 0)\n          throw new ft(`Tried to invoke ctor of ${h} with invalid number of parameters (${xt.length}) - expected (${Object.keys(L.constructor_body).toString()}) parameters instead!`);\n        return xe.apply(this, xt);\n      }), X = Object.create(A, {\n        constructor: {\n          value: I\n        }\n      });\n      I.prototype = X;\n      var L = new Sr(h, I, X, w, S, i, s, d);\n      if (L.baseClass) {\n        var W, Ot;\n        (Ot = (W = L.baseClass).__derivedClasses) !== null && Ot !== void 0 || (W.__derivedClasses = []), L.baseClass.__derivedClasses.push(L);\n      }\n      var Ra = new Et(h, L, !0, !1, !1), Ee = new Et(h + \"*\", L, !1, !1, !1), _e = new Et(h + \" const*\", L, !1, !0, !1);\n      return ue[e] = {\n        pointerType: Ee,\n        constPointerType: _e\n      }, de(b, I), [Ra, Ee, _e];\n    });\n  }, kt = (e, t) => {\n    for (var r = [], n = 0; n < e; n++)\n      r.push(P[t + n * 4 >> 2]);\n    return r;\n  };\n  function Hr(e) {\n    for (var t = 1; t < e.length; ++t)\n      if (e[t] !== null && e[t].destructorFunction === void 0)\n        return !0;\n    return !1;\n  }\n  function Ht(e, t, r, n, a, i) {\n    var u = t.length;\n    u < 2 && C(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n    var s = t[1] !== null && r !== null, l = Hr(t), d = t[0].name !== \"void\", h = u - 2, p = new Array(h), w = [], b = [], _ = function() {\n      b.length = 0;\n      var S;\n      w.length = s ? 2 : 1, w[0] = a, s && (S = t[1].toWireType(b, this), w[1] = S);\n      for (var A = 0; A < h; ++A)\n        p[A] = t[A + 2].toWireType(b, A < 0 || arguments.length <= A ? void 0 : arguments[A]), w.push(p[A]);\n      var I = n(...w);\n      function X(L) {\n        if (l)\n          Lt(b);\n        else\n          for (var W = s ? 1 : 2; W < t.length; W++) {\n            var Ot = W === 1 ? S : p[W - 2];\n            t[W].destructorFunction !== null && t[W].destructorFunction(Ot);\n          }\n        if (d)\n          return t[0].fromWireType(L);\n      }\n      return X(I);\n    };\n    return Ut(e, _);\n  }\n  var Nr = (e, t, r, n, a, i) => {\n    var u = kt(t, r);\n    a = U(n, a), tt([], [e], (s) => {\n      s = s[0];\n      var l = `constructor ${s.name}`;\n      if (s.registeredClass.constructor_body === void 0 && (s.registeredClass.constructor_body = []), s.registeredClass.constructor_body[t - 1] !== void 0)\n        throw new ft(`Cannot register multiple constructors with identical number of parameters (${t - 1}) for class '${s.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\n      return s.registeredClass.constructor_body[t - 1] = () => {\n        _t(`Cannot construct ${s.name} due to unbound types`, u);\n      }, tt([], u, (d) => (d.splice(1, 0, null), s.registeredClass.constructor_body[t - 1] = Ht(l, d, null, a, i), [])), [];\n    });\n  }, ye = (e) => {\n    e = e.trim();\n    const t = e.indexOf(\"(\");\n    return t === -1 ? e : e.slice(0, t);\n  }, zr = (e, t, r, n, a, i, u, s, l, d) => {\n    var h = kt(r, n);\n    t = j(t), t = ye(t), i = U(a, i), tt([], [e], (p) => {\n      p = p[0];\n      var w = `${p.name}.${t}`;\n      t.startsWith(\"@@\") && (t = Symbol[t.substring(2)]), s && p.registeredClass.pureVirtualFunctions.push(t);\n      function b() {\n        _t(`Cannot call ${w} due to unbound types`, h);\n      }\n      var _ = p.registeredClass.instancePrototype, S = _[t];\n      return S === void 0 || S.overloadTable === void 0 && S.className !== p.name && S.argCount === r - 2 ? (b.argCount = r - 2, b.className = p.name, _[t] = b) : (ce(_, t, w), _[t].overloadTable[r - 2] = b), tt([], h, (A) => {\n        var I = Ht(w, A, p, i, u);\n        return _[t].overloadTable === void 0 ? (I.argCount = r - 2, _[t] = I) : _[t].overloadTable[r - 2] = I, [];\n      }), [];\n    });\n  }, Nt = [], z = [], zt = (e) => {\n    e > 9 && --z[e + 1] === 0 && (z[e] = void 0, Nt.push(e));\n  }, Gr = () => z.length / 2 - 5 - Nt.length, Xr = () => {\n    z.push(0, 1, void 0, 1, null, 1, !0, 1, !1, 1), c.count_emval_handles = Gr;\n  }, G = {\n    toValue: (e) => (e || C(`Cannot use deleted val. handle = ${e}`), z[e]),\n    toHandle: (e) => {\n      switch (e) {\n        case void 0:\n          return 2;\n        case null:\n          return 4;\n        case !0:\n          return 6;\n        case !1:\n          return 8;\n        default: {\n          const t = Nt.pop() || z.length;\n          return z[t] = e, z[t + 1] = 1, t;\n        }\n      }\n    }\n  }, me = {\n    name: \"emscripten::val\",\n    fromWireType: (e) => {\n      var t = G.toValue(e);\n      return zt(e), t;\n    },\n    toWireType: (e, t) => G.toHandle(t),\n    argPackAdvance: N,\n    readValueFromPointer: lt,\n    destructorFunction: null\n  }, qr = (e) => V(e, me), Yr = (e, t) => {\n    switch (t) {\n      case 4:\n        return function(r) {\n          return this.fromWireType(Kt[r >> 2]);\n        };\n      case 8:\n        return function(r) {\n          return this.fromWireType(te[r >> 3]);\n        };\n      default:\n        throw new TypeError(`invalid float width (${t}): ${e}`);\n    }\n  }, Zr = (e, t, r) => {\n    t = j(t), V(e, {\n      name: t,\n      fromWireType: (n) => n,\n      toWireType: (n, a) => a,\n      argPackAdvance: N,\n      readValueFromPointer: Yr(t, r),\n      destructorFunction: null\n    });\n  }, Qr = (e, t, r, n, a, i, u, s) => {\n    var l = kt(t, r);\n    e = j(e), e = ye(e), a = U(n, a), le(e, function() {\n      _t(`Cannot call ${e} due to unbound types`, l);\n    }, t - 1), tt([], l, (d) => {\n      var h = [d[0], null].concat(d.slice(1));\n      return de(e, Ht(e, h, null, a, i), t - 1), [];\n    });\n  }, Jr = (e, t, r) => {\n    switch (t) {\n      case 1:\n        return r ? (n) => Q[n] : (n) => B[n];\n      case 2:\n        return r ? (n) => ut[n >> 1] : (n) => vt[n >> 1];\n      case 4:\n        return r ? (n) => at[n >> 2] : (n) => P[n >> 2];\n      default:\n        throw new TypeError(`invalid integer width (${t}): ${e}`);\n    }\n  }, Kr = (e, t, r, n, a) => {\n    t = j(t);\n    var i = (h) => h;\n    if (n === 0) {\n      var u = 32 - 8 * r;\n      i = (h) => h << u >>> u;\n    }\n    var s = t.includes(\"unsigned\"), l = (h, p) => {\n    }, d;\n    s ? d = function(h, p) {\n      return l(p, this.name), p >>> 0;\n    } : d = function(h, p) {\n      return l(p, this.name), p;\n    }, V(e, {\n      name: t,\n      fromWireType: i,\n      toWireType: d,\n      argPackAdvance: N,\n      readValueFromPointer: Jr(t, r, n !== 0),\n      destructorFunction: null\n    });\n  }, tn = (e, t, r) => {\n    var n = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array], a = n[t];\n    function i(u) {\n      var s = P[u >> 2], l = P[u + 4 >> 2];\n      return new a(Q.buffer, l, s);\n    }\n    r = j(r), V(e, {\n      name: r,\n      fromWireType: i,\n      argPackAdvance: N,\n      readValueFromPointer: i\n    }, {\n      ignoreDuplicateRegistrations: !0\n    });\n  }, en = Object.assign({\n    optional: !0\n  }, me), rn = (e, t) => {\n    V(e, en);\n  }, nn = (e, t, r, n) => {\n    if (!(n > 0)) return 0;\n    for (var a = r, i = r + n - 1, u = 0; u < e.length; ++u) {\n      var s = e.charCodeAt(u);\n      if (s >= 55296 && s <= 57343) {\n        var l = e.charCodeAt(++u);\n        s = 65536 + ((s & 1023) << 10) | l & 1023;\n      }\n      if (s <= 127) {\n        if (r >= i) break;\n        t[r++] = s;\n      } else if (s <= 2047) {\n        if (r + 1 >= i) break;\n        t[r++] = 192 | s >> 6, t[r++] = 128 | s & 63;\n      } else if (s <= 65535) {\n        if (r + 2 >= i) break;\n        t[r++] = 224 | s >> 12, t[r++] = 128 | s >> 6 & 63, t[r++] = 128 | s & 63;\n      } else {\n        if (r + 3 >= i) break;\n        t[r++] = 240 | s >> 18, t[r++] = 128 | s >> 12 & 63, t[r++] = 128 | s >> 6 & 63, t[r++] = 128 | s & 63;\n      }\n    }\n    return t[r] = 0, r - a;\n  }, it = (e, t, r) => nn(e, B, t, r), ge = (e) => {\n    for (var t = 0, r = 0; r < e.length; ++r) {\n      var n = e.charCodeAt(r);\n      n <= 127 ? t++ : n <= 2047 ? t += 2 : n >= 55296 && n <= 57343 ? (t += 4, ++r) : t += 3;\n    }\n    return t;\n  }, we = typeof TextDecoder < \"u\" ? new TextDecoder() : void 0, $e = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : NaN;\n    for (var n = t + r, a = t; e[a] && !(a >= n); ) ++a;\n    if (a - t > 16 && e.buffer && we)\n      return we.decode(e.subarray(t, a));\n    for (var i = \"\"; t < a; ) {\n      var u = e[t++];\n      if (!(u & 128)) {\n        i += String.fromCharCode(u);\n        continue;\n      }\n      var s = e[t++] & 63;\n      if ((u & 224) == 192) {\n        i += String.fromCharCode((u & 31) << 6 | s);\n        continue;\n      }\n      var l = e[t++] & 63;\n      if ((u & 240) == 224 ? u = (u & 15) << 12 | s << 6 | l : u = (u & 7) << 18 | s << 12 | l << 6 | e[t++] & 63, u < 65536)\n        i += String.fromCharCode(u);\n      else {\n        var d = u - 65536;\n        i += String.fromCharCode(55296 | d >> 10, 56320 | d & 1023);\n      }\n    }\n    return i;\n  }, an = (e, t) => e ? $e(B, e, t) : \"\", on = (e, t) => {\n    t = j(t), V(e, {\n      name: t,\n      fromWireType(r) {\n        for (var n = P[r >> 2], a = r + 4, i, s, u = a, s = 0; s <= n; ++s) {\n          var l = a + s;\n          if (s == n || B[l] == 0) {\n            var d = l - u, h = an(u, d);\n            i === void 0 ? i = h : (i += \"\\0\", i += h), u = l + 1;\n          }\n        }\n        return et(r), i;\n      },\n      toWireType(r, n) {\n        n instanceof ArrayBuffer && (n = new Uint8Array(n));\n        var a, i = typeof n == \"string\";\n        i || ArrayBuffer.isView(n) && n.BYTES_PER_ELEMENT == 1 || C(\"Cannot pass non-string to std::string\"), i ? a = ge(n) : a = n.length;\n        var u = Pe(4 + a + 1), s = u + 4;\n        return P[u >> 2] = a, i ? it(n, s, a + 1) : B.set(n, s), r !== null && r.push(et, u), u;\n      },\n      argPackAdvance: N,\n      readValueFromPointer: lt,\n      destructorFunction(r) {\n        et(r);\n      }\n    });\n  }, be = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf-16le\") : void 0, sn = (e, t) => {\n    for (var r = e, n = r >> 1, a = n + t / 2; !(n >= a) && vt[n]; ) ++n;\n    if (r = n << 1, r - e > 32 && be) return be.decode(B.subarray(e, r));\n    for (var i = \"\", u = 0; !(u >= t / 2); ++u) {\n      var s = ut[e + u * 2 >> 1];\n      if (s == 0) break;\n      i += String.fromCharCode(s);\n    }\n    return i;\n  }, un = (e, t, r) => {\n    if (r != null || (r = 2147483647), r < 2) return 0;\n    r -= 2;\n    for (var n = t, a = r < e.length * 2 ? r / 2 : e.length, i = 0; i < a; ++i) {\n      var u = e.charCodeAt(i);\n      ut[t >> 1] = u, t += 2;\n    }\n    return ut[t >> 1] = 0, t - n;\n  }, cn = (e) => e.length * 2, ln = (e, t) => {\n    for (var r = 0, n = \"\"; !(r >= t / 4); ) {\n      var a = at[e + r * 4 >> 2];\n      if (a == 0) break;\n      if (++r, a >= 65536) {\n        var i = a - 65536;\n        n += String.fromCharCode(55296 | i >> 10, 56320 | i & 1023);\n      } else\n        n += String.fromCharCode(a);\n    }\n    return n;\n  }, fn = (e, t, r) => {\n    if (r != null || (r = 2147483647), r < 4) return 0;\n    for (var n = t, a = n + r - 4, i = 0; i < e.length; ++i) {\n      var u = e.charCodeAt(i);\n      if (u >= 55296 && u <= 57343) {\n        var s = e.charCodeAt(++i);\n        u = 65536 + ((u & 1023) << 10) | s & 1023;\n      }\n      if (at[t >> 2] = u, t += 4, t + 4 > a) break;\n    }\n    return at[t >> 2] = 0, t - n;\n  }, dn = (e) => {\n    for (var t = 0, r = 0; r < e.length; ++r) {\n      var n = e.charCodeAt(r);\n      n >= 55296 && n <= 57343 && ++r, t += 4;\n    }\n    return t;\n  }, hn = (e, t, r) => {\n    r = j(r);\n    var n, a, i, u;\n    t === 2 ? (n = sn, a = un, u = cn, i = (s) => vt[s >> 1]) : t === 4 && (n = ln, a = fn, u = dn, i = (s) => P[s >> 2]), V(e, {\n      name: r,\n      fromWireType: (s) => {\n        for (var l = P[s >> 2], d, h = s + 4, p = 0; p <= l; ++p) {\n          var w = s + 4 + p * t;\n          if (p == l || i(w) == 0) {\n            var b = w - h, _ = n(h, b);\n            d === void 0 ? d = _ : (d += \"\\0\", d += _), h = w + t;\n          }\n        }\n        return et(s), d;\n      },\n      toWireType: (s, l) => {\n        typeof l != \"string\" && C(`Cannot pass non-string to C++ string type ${r}`);\n        var d = u(l), h = Pe(4 + d + t);\n        return P[h >> 2] = d / t, a(l, h + 4, d + t), s !== null && s.push(et, h), h;\n      },\n      argPackAdvance: N,\n      readValueFromPointer: lt,\n      destructorFunction(s) {\n        et(s);\n      }\n    });\n  }, pn = (e, t, r, n, a, i) => {\n    $t[e] = {\n      name: j(t),\n      rawConstructor: U(r, n),\n      rawDestructor: U(a, i),\n      fields: []\n    };\n  }, vn = (e, t, r, n, a, i, u, s, l, d) => {\n    $t[e].fields.push({\n      fieldName: j(t),\n      getterReturnType: r,\n      getter: U(n, a),\n      getterContext: i,\n      setterArgumentType: u,\n      setter: U(s, l),\n      setterContext: d\n    });\n  }, yn = (e, t) => {\n    t = j(t), V(e, {\n      isVoid: !0,\n      name: t,\n      argPackAdvance: 0,\n      fromWireType: () => {\n      },\n      toWireType: (r, n) => {\n      }\n    });\n  }, Gt = [], mn = (e, t, r, n) => (e = Gt[e], t = G.toValue(t), e(null, t, r, n)), gn = {}, wn = (e) => {\n    var t = gn[e];\n    return t === void 0 ? j(e) : t;\n  }, Ce = () => {\n    if (typeof globalThis == \"object\")\n      return globalThis;\n    function e(t) {\n      t.$$$embind_global$$$ = t;\n      var r = typeof $$$embind_global$$$ == \"object\" && t.$$$embind_global$$$ == t;\n      return r || delete t.$$$embind_global$$$, r;\n    }\n    if (typeof $$$embind_global$$$ == \"object\" || (typeof global == \"object\" && e(global) ? $$$embind_global$$$ = global : typeof self == \"object\" && e(self) && ($$$embind_global$$$ = self), typeof $$$embind_global$$$ == \"object\"))\n      return $$$embind_global$$$;\n    throw Error(\"unable to get global object.\");\n  }, $n = (e) => e === 0 ? G.toHandle(Ce()) : (e = wn(e), G.toHandle(Ce()[e])), bn = (e) => {\n    var t = Gt.length;\n    return Gt.push(e), t;\n  }, Te = (e, t) => {\n    var r = K[e];\n    return r === void 0 && C(`${t} has unknown type ${ve(e)}`), r;\n  }, Cn = (e, t) => {\n    for (var r = new Array(e), n = 0; n < e; ++n)\n      r[n] = Te(P[t + n * 4 >> 2], `parameter ${n}`);\n    return r;\n  }, Tn = (e, t, r) => {\n    var n = [], a = e.toWireType(n, r);\n    return n.length && (P[t >> 2] = G.toHandle(n)), a;\n  }, Pn = Reflect.construct, En = (e, t, r) => {\n    var n = Cn(e, t), a = n.shift();\n    e--;\n    var i = new Array(e), u = (l, d, h, p) => {\n      for (var w = 0, b = 0; b < e; ++b)\n        i[b] = n[b].readValueFromPointer(p + w), w += n[b].argPackAdvance;\n      var _ = r === 1 ? Pn(d, i) : d.apply(l, i);\n      return Tn(a, h, _);\n    }, s = `methodCaller<(${n.map((l) => l.name).join(\", \")}) => ${a.name}>`;\n    return bn(Ut(s, u));\n  }, _n = (e) => {\n    e > 9 && (z[e + 1] += 1);\n  }, On = (e) => {\n    var t = G.toValue(e);\n    Lt(t), zt(e);\n  }, xn = (e, t) => {\n    e = Te(e, \"_emval_take_value\");\n    var r = e.readValueFromPointer(t);\n    return G.toHandle(r);\n  }, An = (e, t, r, n) => {\n    var a = (/* @__PURE__ */ new Date()).getFullYear(), i = new Date(a, 0, 1), u = new Date(a, 6, 1), s = i.getTimezoneOffset(), l = u.getTimezoneOffset(), d = Math.max(s, l);\n    P[e >> 2] = d * 60, at[t >> 2] = +(s != l);\n    var h = (b) => {\n      var _ = b >= 0 ? \"-\" : \"+\", S = Math.abs(b), A = String(Math.floor(S / 60)).padStart(2, \"0\"), I = String(S % 60).padStart(2, \"0\");\n      return `UTC${_}${A}${I}`;\n    }, p = h(s), w = h(l);\n    l < s ? (it(p, r, 17), it(w, n, 17)) : (it(p, n, 17), it(w, r, 17));\n  }, Sn = () => 2147483648, In = (e, t) => Math.ceil(e / t) * t, Dn = (e) => {\n    var t = nt.buffer, r = (e - t.byteLength + 65535) / 65536 | 0;\n    try {\n      return nt.grow(r), ee(), 1;\n    } catch {\n    }\n  }, Mn = (e) => {\n    var t = B.length;\n    e >>>= 0;\n    var r = Sn();\n    if (e > r)\n      return !1;\n    for (var n = 1; n <= 4; n *= 2) {\n      var a = t * (1 + 0.2 / n);\n      a = Math.min(a, e + 100663296);\n      var i = Math.min(r, In(Math.max(e, a), 65536)), u = Dn(i);\n      if (u)\n        return !0;\n    }\n    return !1;\n  }, Xt = {}, Fn = () => M || \"./this.program\", ht = () => {\n    if (!ht.strings) {\n      var e = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\", t = {\n        USER: \"web_user\",\n        LOGNAME: \"web_user\",\n        PATH: \"/\",\n        PWD: \"/\",\n        HOME: \"/home/web_user\",\n        LANG: e,\n        _: Fn()\n      };\n      for (var r in Xt)\n        Xt[r] === void 0 ? delete t[r] : t[r] = Xt[r];\n      var n = [];\n      for (var r in t)\n        n.push(`${r}=${t[r]}`);\n      ht.strings = n;\n    }\n    return ht.strings;\n  }, jn = (e, t) => {\n    var r = 0, n = 0;\n    for (var a of ht()) {\n      var i = t + r;\n      P[e + n >> 2] = i, r += it(a, i, 1 / 0) + 1, n += 4;\n    }\n    return 0;\n  }, Rn = (e, t) => {\n    var r = ht();\n    P[e >> 2] = r.length;\n    var n = 0;\n    for (var a of r)\n      n += ge(a) + 1;\n    return P[t >> 2] = n, 0;\n  }, Ln = (e) => 52;\n  function Bn(e, t, r, n, a) {\n    return 70;\n  }\n  var Wn = [null, [], []], Un = (e, t) => {\n    var r = Wn[e];\n    t === 0 || t === 10 ? ((e === 1 ? st : k)($e(r)), r.length = 0) : r.push(t);\n  }, Vn = (e, t, r, n) => {\n    for (var a = 0, i = 0; i < r; i++) {\n      var u = P[t >> 2], s = P[t + 4 >> 2];\n      t += 8;\n      for (var l = 0; l < s; l++)\n        Un(e, B[u + l]);\n      a += s;\n    }\n    return P[n >> 2] = a, 0;\n  }, kn = (e) => e;\n  br(), _r(), Br(), Xr(), c.noExitRuntime && c.noExitRuntime, c.print && (st = c.print), c.printErr && (k = c.printErr), c.wasmBinary && (Z = c.wasmBinary), c.arguments && c.arguments, c.thisProgram && (M = c.thisProgram);\n  var Hn = {\n    s: ur,\n    w: cr,\n    a: lr,\n    j: fr,\n    m: dr,\n    N: hr,\n    p: pr,\n    da: vr,\n    d: yr,\n    _: mr,\n    sa: wr,\n    Z: $r,\n    na: Tr,\n    qa: kr,\n    pa: Nr,\n    F: zr,\n    la: qr,\n    R: Zr,\n    S: Qr,\n    y: Kr,\n    t: tn,\n    ra: rn,\n    ma: on,\n    O: hn,\n    K: pn,\n    ta: vn,\n    oa: yn,\n    V: mn,\n    ua: zt,\n    wa: $n,\n    $: En,\n    T: _n,\n    va: On,\n    ka: xn,\n    aa: An,\n    ea: Mn,\n    ba: jn,\n    ca: Rn,\n    fa: Ln,\n    X: Bn,\n    Q: Vn,\n    I: ba,\n    C: Ta,\n    U: oa,\n    P: Sa,\n    q: ma,\n    b: ea,\n    D: $a,\n    ia: Ea,\n    c: na,\n    ha: _a,\n    h: aa,\n    i: la,\n    r: da,\n    M: wa,\n    v: pa,\n    E: ya,\n    J: ga,\n    A: Pa,\n    H: Ia,\n    W: Fa,\n    k: sa,\n    f: ia,\n    e: ra,\n    g: ta,\n    L: Aa,\n    l: ca,\n    ja: Ca,\n    o: ha,\n    x: fa,\n    u: va,\n    ga: xa,\n    B: Oa,\n    n: ua,\n    G: Da,\n    Y: Ma,\n    z: kn\n  }, E = await or();\n  E.ya;\n  var Nn = E.za, et = c._free = E.Aa, Pe = c._malloc = E.Ca, zn = E.Da, v = E.Ea, Gn = E.Fa, Xn = E.Ga, qn = E.Ha, Yn = E.Ia, Zn = E.Ja, Qn = E.Ka;\n  c.dynCall_viijii = E.La;\n  var Jn = c.dynCall_vij = E.Ma;\n  c.dynCall_jiji = E.Na;\n  var Kn = c.dynCall_jiiii = E.Oa;\n  c.dynCall_iiiiij = E.Pa, c.dynCall_iiiiijj = E.Qa, c.dynCall_iiiiiijj = E.Ra;\n  function ta(e, t, r, n) {\n    var a = m();\n    try {\n      g(e)(t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function ea(e, t) {\n    var r = m();\n    try {\n      return g(e)(t);\n    } catch (n) {\n      if (y(r), n !== n + 0) throw n;\n      v(1, 0);\n    }\n  }\n  function ra(e, t, r) {\n    var n = m();\n    try {\n      g(e)(t, r);\n    } catch (a) {\n      if (y(n), a !== a + 0) throw a;\n      v(1, 0);\n    }\n  }\n  function na(e, t, r) {\n    var n = m();\n    try {\n      return g(e)(t, r);\n    } catch (a) {\n      if (y(n), a !== a + 0) throw a;\n      v(1, 0);\n    }\n  }\n  function aa(e, t, r, n) {\n    var a = m();\n    try {\n      return g(e)(t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function oa(e, t, r, n, a) {\n    var i = m();\n    try {\n      return g(e)(t, r, n, a);\n    } catch (u) {\n      if (y(i), u !== u + 0) throw u;\n      v(1, 0);\n    }\n  }\n  function ia(e, t) {\n    var r = m();\n    try {\n      g(e)(t);\n    } catch (n) {\n      if (y(r), n !== n + 0) throw n;\n      v(1, 0);\n    }\n  }\n  function sa(e) {\n    var t = m();\n    try {\n      g(e)();\n    } catch (r) {\n      if (y(t), r !== r + 0) throw r;\n      v(1, 0);\n    }\n  }\n  function ua(e, t, r, n, a, i, u, s, l, d, h) {\n    var p = m();\n    try {\n      g(e)(t, r, n, a, i, u, s, l, d, h);\n    } catch (w) {\n      if (y(p), w !== w + 0) throw w;\n      v(1, 0);\n    }\n  }\n  function ca(e, t, r, n, a) {\n    var i = m();\n    try {\n      g(e)(t, r, n, a);\n    } catch (u) {\n      if (y(i), u !== u + 0) throw u;\n      v(1, 0);\n    }\n  }\n  function la(e, t, r, n, a) {\n    var i = m();\n    try {\n      return g(e)(t, r, n, a);\n    } catch (u) {\n      if (y(i), u !== u + 0) throw u;\n      v(1, 0);\n    }\n  }\n  function fa(e, t, r, n, a, i, u) {\n    var s = m();\n    try {\n      g(e)(t, r, n, a, i, u);\n    } catch (l) {\n      if (y(s), l !== l + 0) throw l;\n      v(1, 0);\n    }\n  }\n  function da(e, t, r, n, a, i) {\n    var u = m();\n    try {\n      return g(e)(t, r, n, a, i);\n    } catch (s) {\n      if (y(u), s !== s + 0) throw s;\n      v(1, 0);\n    }\n  }\n  function ha(e, t, r, n, a, i) {\n    var u = m();\n    try {\n      g(e)(t, r, n, a, i);\n    } catch (s) {\n      if (y(u), s !== s + 0) throw s;\n      v(1, 0);\n    }\n  }\n  function pa(e, t, r, n, a, i, u) {\n    var s = m();\n    try {\n      return g(e)(t, r, n, a, i, u);\n    } catch (l) {\n      if (y(s), l !== l + 0) throw l;\n      v(1, 0);\n    }\n  }\n  function va(e, t, r, n, a, i, u, s) {\n    var l = m();\n    try {\n      g(e)(t, r, n, a, i, u, s);\n    } catch (d) {\n      if (y(l), d !== d + 0) throw d;\n      v(1, 0);\n    }\n  }\n  function ya(e, t, r, n, a, i, u, s) {\n    var l = m();\n    try {\n      return g(e)(t, r, n, a, i, u, s);\n    } catch (d) {\n      if (y(l), d !== d + 0) throw d;\n      v(1, 0);\n    }\n  }\n  function ma(e) {\n    var t = m();\n    try {\n      return g(e)();\n    } catch (r) {\n      if (y(t), r !== r + 0) throw r;\n      v(1, 0);\n    }\n  }\n  function ga(e, t, r, n, a, i, u, s, l) {\n    var d = m();\n    try {\n      return g(e)(t, r, n, a, i, u, s, l);\n    } catch (h) {\n      if (y(d), h !== h + 0) throw h;\n      v(1, 0);\n    }\n  }\n  function wa(e, t, r, n, a, i, u) {\n    var s = m();\n    try {\n      return g(e)(t, r, n, a, i, u);\n    } catch (l) {\n      if (y(s), l !== l + 0) throw l;\n      v(1, 0);\n    }\n  }\n  function $a(e, t, r, n) {\n    var a = m();\n    try {\n      return g(e)(t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function ba(e, t, r, n) {\n    var a = m();\n    try {\n      return g(e)(t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function Ca(e, t, r, n, a, i, u, s) {\n    var l = m();\n    try {\n      g(e)(t, r, n, a, i, u, s);\n    } catch (d) {\n      if (y(l), d !== d + 0) throw d;\n      v(1, 0);\n    }\n  }\n  function Ta(e, t, r, n, a, i) {\n    var u = m();\n    try {\n      return g(e)(t, r, n, a, i);\n    } catch (s) {\n      if (y(u), s !== s + 0) throw s;\n      v(1, 0);\n    }\n  }\n  function Pa(e, t, r, n, a, i, u, s, l, d) {\n    var h = m();\n    try {\n      return g(e)(t, r, n, a, i, u, s, l, d);\n    } catch (p) {\n      if (y(h), p !== p + 0) throw p;\n      v(1, 0);\n    }\n  }\n  function Ea(e, t, r) {\n    var n = m();\n    try {\n      return g(e)(t, r);\n    } catch (a) {\n      if (y(n), a !== a + 0) throw a;\n      v(1, 0);\n    }\n  }\n  function _a(e, t, r, n, a) {\n    var i = m();\n    try {\n      return g(e)(t, r, n, a);\n    } catch (u) {\n      if (y(i), u !== u + 0) throw u;\n      v(1, 0);\n    }\n  }\n  function Oa(e, t, r, n, a, i, u, s, l, d) {\n    var h = m();\n    try {\n      g(e)(t, r, n, a, i, u, s, l, d);\n    } catch (p) {\n      if (y(h), p !== p + 0) throw p;\n      v(1, 0);\n    }\n  }\n  function xa(e, t, r, n, a, i, u, s, l) {\n    var d = m();\n    try {\n      g(e)(t, r, n, a, i, u, s, l);\n    } catch (h) {\n      if (y(d), h !== h + 0) throw h;\n      v(1, 0);\n    }\n  }\n  function Aa(e, t, r, n, a, i, u) {\n    var s = m();\n    try {\n      g(e)(t, r, n, a, i, u);\n    } catch (l) {\n      if (y(s), l !== l + 0) throw l;\n      v(1, 0);\n    }\n  }\n  function Sa(e, t, r, n) {\n    var a = m();\n    try {\n      return g(e)(t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function Ia(e, t, r, n, a, i, u, s, l, d, h, p) {\n    var w = m();\n    try {\n      return g(e)(t, r, n, a, i, u, s, l, d, h, p);\n    } catch (b) {\n      if (y(w), b !== b + 0) throw b;\n      v(1, 0);\n    }\n  }\n  function Da(e, t, r, n, a, i, u, s, l, d, h, p, w, b, _, S) {\n    var A = m();\n    try {\n      g(e)(t, r, n, a, i, u, s, l, d, h, p, w, b, _, S);\n    } catch (I) {\n      if (y(A), I !== I + 0) throw I;\n      v(1, 0);\n    }\n  }\n  function Ma(e, t, r, n) {\n    var a = m();\n    try {\n      Jn(e, t, r, n);\n    } catch (i) {\n      if (y(a), i !== i + 0) throw i;\n      v(1, 0);\n    }\n  }\n  function Fa(e, t, r, n, a) {\n    var i = m();\n    try {\n      return Kn(e, t, r, n, a);\n    } catch (u) {\n      if (y(i), u !== u + 0) throw u;\n      v(1, 0);\n    }\n  }\n  function qt() {\n    if (J > 0) {\n      ct = qt;\n      return;\n    }\n    if (qe(), J > 0) {\n      ct = qt;\n      return;\n    }\n    function e() {\n      var t;\n      c.calledRun = !0, !Jt && (Ye(), T(c), (t = c.onRuntimeInitialized) === null || t === void 0 || t.call(c), Ze());\n    }\n    c.setStatus ? (c.setStatus(\"Running...\"), setTimeout(() => {\n      setTimeout(() => c.setStatus(\"\"), 1), e();\n    }, 1)) : e();\n  }\n  function ja() {\n    if (c.preInit)\n      for (typeof c.preInit == \"function\" && (c.preInit = [c.preInit]); c.preInit.length > 0; )\n        c.preInit.shift()();\n  }\n  return ja(), qt(), f = x, f;\n};\nfunction Be(o) {\n  return Le(Qt, o);\n}\nfunction Co() {\n  return Ka(Qt);\n}\nfunction To(o) {\n  Be({\n    overrides: o,\n    equalityFn: Object.is,\n    fireImmediately: !1\n  });\n}\nasync function eo(o, f) {\n  return to(Qt, o, f);\n}\nconst Po = \"3c07027dbfd6da47330ac18e74e6924019d9ac9a4c1e161b800666f9e3c925ca\", We = [\n  [\"aztec\", \"Aztec\"],\n  [\"code_128\", \"Code128\"],\n  [\"code_39\", \"Code39\"],\n  [\"code_93\", \"Code93\"],\n  [\"codabar\", \"Codabar\"],\n  [\"databar\", \"DataBar\"],\n  [\"databar_expanded\", \"DataBarExpanded\"],\n  [\"databar_limited\", \"DataBarLimited\"],\n  [\"data_matrix\", \"DataMatrix\"],\n  [\"dx_film_edge\", \"DXFilmEdge\"],\n  [\"ean_13\", \"EAN-13\"],\n  [\"ean_8\", \"EAN-8\"],\n  [\"itf\", \"ITF\"],\n  [\"maxi_code\", \"MaxiCode\"],\n  [\"micro_qr_code\", \"MicroQRCode\"],\n  [\"pdf417\", \"PDF417\"],\n  [\"qr_code\", \"QRCode\"],\n  [\"rm_qr_code\", \"rMQRCode\"],\n  [\"upc_a\", \"UPC-A\"],\n  [\"upc_e\", \"UPC-E\"],\n  [\"linear_codes\", \"Linear-Codes\"],\n  [\"matrix_codes\", \"Matrix-Codes\"],\n  [\"any\", \"Any\"]\n], ro = [...We, [\"unknown\"]].map((o) => o[0]), Zt = new Map(\n  We\n);\nfunction no(o) {\n  for (const [f, c] of Zt)\n    if (o === c)\n      return f;\n  return \"unknown\";\n}\nfunction ao(o) {\n  if (Ue(o))\n    return {\n      width: o.naturalWidth,\n      height: o.naturalHeight\n    };\n  if (Ve(o))\n    return {\n      width: o.width.baseVal.value,\n      height: o.height.baseVal.value\n    };\n  if (ke(o))\n    return {\n      width: o.videoWidth,\n      height: o.videoHeight\n    };\n  if (Ne(o))\n    return {\n      width: o.width,\n      height: o.height\n    };\n  if (Ge(o))\n    return {\n      width: o.displayWidth,\n      height: o.displayHeight\n    };\n  if (He(o))\n    return {\n      width: o.width,\n      height: o.height\n    };\n  if (ze(o))\n    return {\n      width: o.width,\n      height: o.height\n    };\n  throw new TypeError(\n    \"The provided value is not of type '(Blob or HTMLCanvasElement or HTMLImageElement or HTMLVideoElement or ImageBitmap or ImageData or OffscreenCanvas or SVGImageElement or VideoFrame)'.\"\n  );\n}\nfunction Ue(o) {\n  var f, c;\n  try {\n    return o instanceof ((c = (f = o == null ? void 0 : o.ownerDocument) == null ? void 0 : f.defaultView) == null ? void 0 : c.HTMLImageElement);\n  } catch {\n    return !1;\n  }\n}\nfunction Ve(o) {\n  var f, c;\n  try {\n    return o instanceof ((c = (f = o == null ? void 0 : o.ownerDocument) == null ? void 0 : f.defaultView) == null ? void 0 : c.SVGImageElement);\n  } catch {\n    return !1;\n  }\n}\nfunction ke(o) {\n  var f, c;\n  try {\n    return o instanceof ((c = (f = o == null ? void 0 : o.ownerDocument) == null ? void 0 : f.defaultView) == null ? void 0 : c.HTMLVideoElement);\n  } catch {\n    return !1;\n  }\n}\nfunction He(o) {\n  var f, c;\n  try {\n    return o instanceof ((c = (f = o == null ? void 0 : o.ownerDocument) == null ? void 0 : f.defaultView) == null ? void 0 : c.HTMLCanvasElement);\n  } catch {\n    return !1;\n  }\n}\nfunction Ne(o) {\n  try {\n    return o instanceof ImageBitmap || Object.prototype.toString.call(o) === \"[object ImageBitmap]\";\n  } catch {\n    return !1;\n  }\n}\nfunction ze(o) {\n  try {\n    return o instanceof OffscreenCanvas || Object.prototype.toString.call(o) === \"[object OffscreenCanvas]\";\n  } catch {\n    return !1;\n  }\n}\nfunction Ge(o) {\n  try {\n    return o instanceof VideoFrame || Object.prototype.toString.call(o) === \"[object VideoFrame]\";\n  } catch {\n    return !1;\n  }\n}\nfunction oo(o) {\n  try {\n    return o instanceof Blob || Object.prototype.toString.call(o) === \"[object Blob]\";\n  } catch {\n    return !1;\n  }\n}\nfunction io(o) {\n  try {\n    return o instanceof ImageData || Object.prototype.toString.call(o) === \"[object ImageData]\";\n  } catch {\n    return !1;\n  }\n}\nfunction so(o, f) {\n  try {\n    const c = new OffscreenCanvas(o, f);\n    if (c.getContext(\"2d\") instanceof OffscreenCanvasRenderingContext2D)\n      return c;\n    throw void 0;\n  } catch {\n    const c = document.createElement(\"canvas\");\n    return c.width = o, c.height = f, c;\n  }\n}\nasync function Xe(o) {\n  if (Ue(o) && !await fo(o))\n    throw new DOMException(\n      \"Failed to load or decode HTMLImageElement.\",\n      \"InvalidStateError\"\n    );\n  if (Ve(o) && !await ho(o))\n    throw new DOMException(\n      \"Failed to load or decode SVGImageElement.\",\n      \"InvalidStateError\"\n    );\n  if (Ge(o) && po(o))\n    throw new DOMException(\"VideoFrame is closed.\", \"InvalidStateError\");\n  if (ke(o) && (o.readyState === 0 || o.readyState === 1))\n    throw new DOMException(\"Invalid element or state.\", \"InvalidStateError\");\n  if (Ne(o) && yo(o))\n    throw new DOMException(\n      \"The image source is detached.\",\n      \"InvalidStateError\"\n    );\n  const { width: f, height: c } = ao(o);\n  if (f === 0 || c === 0)\n    return null;\n  const $ = so(f, c).getContext(\"2d\");\n  $.drawImage(o, 0, 0);\n  try {\n    return $.getImageData(0, 0, f, c);\n  } catch {\n    throw new DOMException(\"Source would taint origin.\", \"SecurityError\");\n  }\n}\nasync function uo(o) {\n  let f;\n  try {\n    f = await createImageBitmap(o);\n  } catch {\n    try {\n      if (globalThis.Image) {\n        f = new Image();\n        let $ = \"\";\n        try {\n          $ = URL.createObjectURL(o), f.src = $, await f.decode();\n        } finally {\n          URL.revokeObjectURL($);\n        }\n      } else\n        return o;\n    } catch {\n      throw new DOMException(\n        \"Failed to load or decode Blob.\",\n        \"InvalidStateError\"\n      );\n    }\n  }\n  return await Xe(f);\n}\nfunction co(o) {\n  const { width: f, height: c } = o;\n  if (f === 0 || c === 0)\n    return null;\n  const T = o.getContext(\"2d\");\n  try {\n    return T.getImageData(0, 0, f, c);\n  } catch {\n    throw new DOMException(\"Source would taint origin.\", \"SecurityError\");\n  }\n}\nasync function lo(o) {\n  if (oo(o))\n    return await uo(o);\n  if (io(o)) {\n    if (vo(o))\n      throw new DOMException(\n        \"The image data has been detached.\",\n        \"InvalidStateError\"\n      );\n    return o;\n  }\n  return He(o) || ze(o) ? co(o) : await Xe(o);\n}\nasync function fo(o) {\n  try {\n    return await o.decode(), !0;\n  } catch {\n    return !1;\n  }\n}\nasync function ho(o) {\n  var f;\n  try {\n    return await ((f = o.decode) == null ? void 0 : f.call(o)), !0;\n  } catch {\n    return !1;\n  }\n}\nfunction po(o) {\n  return o.format === null;\n}\nfunction vo(o) {\n  return o.data.buffer.byteLength === 0;\n}\nfunction yo(o) {\n  return o.width === 0 && o.height === 0;\n}\nfunction Re(o, f) {\n  return mo(o) ? new DOMException(`${f}: ${o.message}`, o.name) : go(o) ? new o.constructor(`${f}: ${o.message}`) : new Error(`${f}: ${o}`);\n}\nfunction mo(o) {\n  return o instanceof DOMException || Object.prototype.toString.call(o) === \"[object DOMException]\";\n}\nfunction go(o) {\n  return o instanceof Error || Object.prototype.toString.call(o) === \"[object Error]\";\n}\nvar pt;\nclass Eo {\n  constructor(f = {}) {\n    De(this, pt);\n    var c;\n    try {\n      const T = (c = f == null ? void 0 : f.formats) == null ? void 0 : c.filter(\n        ($) => $ !== \"unknown\"\n      );\n      if ((T == null ? void 0 : T.length) === 0)\n        throw new TypeError(\"Hint option provided, but is empty.\");\n      for (const $ of T != null ? T : [])\n        if (!Zt.has($))\n          throw new TypeError(\n            `Failed to read the 'formats' property from 'BarcodeDetectorOptions': The provided value '${$}' is not a valid enum value of type BarcodeFormat.`\n          );\n      Me(this, pt, T != null ? T : []), Be({ fireImmediately: !0 }).catch(() => {\n      });\n    } catch (T) {\n      throw Re(\n        T,\n        \"Failed to construct 'BarcodeDetector'\"\n      );\n    }\n  }\n  static async getSupportedFormats() {\n    return ro.filter((f) => f !== \"unknown\");\n  }\n  async detect(f) {\n    try {\n      const c = await lo(f);\n      if (c === null)\n        return [];\n      let T;\n      const $ = {\n        tryCode39ExtendedMode: !1,\n        textMode: \"Plain\",\n        formats: Ie(this, pt).map((x) => Zt.get(x))\n      };\n      try {\n        T = await eo(c, $);\n      } catch (x) {\n        throw console.error(x), new DOMException(\n          \"Barcode detection service unavailable.\",\n          \"NotSupportedError\"\n        );\n      }\n      return T.map((x) => {\n        const {\n          topLeft: { x: D, y: R },\n          topRight: { x: O, y: M },\n          bottomLeft: { x: F, y: q },\n          bottomRight: { x: rt, y: Y }\n        } = x.position, st = Math.min(D, O, F, rt), k = Math.min(R, M, q, Y), Z = Math.max(D, O, F, rt), nt = Math.max(R, M, q, Y);\n        return {\n          boundingBox: new DOMRectReadOnly(\n            st,\n            k,\n            Z - st,\n            nt - k\n          ),\n          rawValue: x.text,\n          format: no(x.format),\n          cornerPoints: [\n            {\n              x: D,\n              y: R\n            },\n            {\n              x: O,\n              y: M\n            },\n            {\n              x: rt,\n              y: Y\n            },\n            {\n              x: F,\n              y: q\n            }\n          ]\n        };\n      });\n    } catch (c) {\n      throw Re(\n        c,\n        \"Failed to execute 'detect' on 'BarcodeDetector'\"\n      );\n    }\n  }\n}\npt = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/barcode-detector/dist/es/ponyfill.js\n");

/***/ })

};
;